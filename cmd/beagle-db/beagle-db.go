// Copyright 2019 The DutchSec Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/build"
	"go/format"
	"go/parser"
	"go/token"
	"go/types"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"path"
	"path/filepath"
	"reflect"
	"strings"
)

var (
	tableName = flag.String("table", "", "")
	tableKey  = flag.String("key", "", "")
	output    = flag.String("output", "", "output file name; default srcdir/<type>_string.go")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
	fmt.Fprintf(os.Stderr, "\tbeagle db [directory|files]\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	log.SetFlags(0)
	log.SetPrefix(fmt.Sprintf("%s: ", os.Args[0]))
	flag.Usage = Usage
	flag.Parse()

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	wd, _ := os.Getwd()

	names := make([]string, len(args))
	for i := range args {
		names[i] = path.Join(wd, args[i])
	}

	// Parse the package once.
	var dir string
	g := Generator{}
	if len(args) == 1 && isDirectory(names[0]) {
		dir = names[0]
		g.parsePackageDir(names[0])
	} else {
		dir = filepath.Dir(names[0])

		g.parsePackageFiles(names)
	}

	// Print the header and package clause.
	g.Printf("// Code generated by \"beagle db %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package %s", g.pkg.name)
	g.Printf("\n")
	g.Printf(`import (
)
`) // Used by all methods.

	// Run generate for each type.
	g.generate()

	// Format the output.
	src := g.format()

	// Write to file.
	outputName := *output
	if outputName == "" {
		parts := strings.Split(filepath.Base(names[0]), ".")
		baseName := fmt.Sprintf("%s_gen.go", parts[0])
		outputName = filepath.Join(dir, strings.ToLower(baseName))
	}

	var err error

	src, err = goimports(outputName, src)
	if err != nil {
		log.Fatalf("Error executing goimport: %s", err.Error())
	}

	if err := ioutil.WriteFile(outputName, src, 0644); err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// isDirectory reports whether the named file is a directory.
func isDirectory(name string) bool {
	info, err := os.Stat(name)
	if err != nil {
		log.Fatal(err)
	}
	return info.IsDir()
}

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.
type Generator struct {
	buf bytes.Buffer // Accumulated output.
	pkg *Package     // Package we are scanning.

	trimPrefix  string
	lineComment bool
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

// File holds a single parsed file and associated data.
type File struct {
	pkg  *Package  // Package to which this file belongs.
	file *ast.File // Parsed AST.
	// These fields are reset for each type being generated.
	typeName string // Name of the constant type.

	trimPrefix  string
	lineComment bool
}

type Package struct {
	dir      string
	name     string
	defs     map[*ast.Ident]types.Object
	files    []*File
	typesPkg *types.Package
}

// parsePackageDir parses the package residing in the directory.
func (g *Generator) parsePackageDir(directory string) {
	pkg, err := build.Default.ImportDir(directory, 0)
	if err != nil {
		log.Fatalf("cannot process directory %s: %s", directory, err)
	}
	var names []string
	names = append(names, pkg.GoFiles...)
	names = append(names, pkg.CgoFiles...)
	// TODO: Need to think about constants in test files. Maybe write type_string_test.go
	// in a separate pass? For later.
	// names = append(names, pkg.TestGoFiles...) // These are also in the "foo" package.
	names = append(names, pkg.SFiles...)
	names = prefixDirectory(directory, names)
	g.parsePackage(directory, names, nil)
}

// parsePackageFiles parses the package occupying the named files.
func (g *Generator) parsePackageFiles(names []string) {
	g.parsePackage(".", names, nil)
}

// prefixDirectory places the directory name on the beginning of each name in the list.
func prefixDirectory(directory string, names []string) []string {
	if directory == "." {
		return names
	}
	ret := make([]string, len(names))
	for i, name := range names {
		ret[i] = filepath.Join(directory, name)
	}
	return ret
}

// parsePackage analyzes the single package constructed from the named files.
// If text is non-nil, it is a string to be used instead of the content of the file,
// to be used for testing. parsePackage exits if there is an error.
func (g *Generator) parsePackage(directory string, names []string, text interface{}) {
	var files []*File
	var astFiles []*ast.File
	g.pkg = new(Package)
	fs := token.NewFileSet()

	for _, name := range names {
		if !strings.HasSuffix(name, ".go") {
			continue
		}
		parsedFile, err := parser.ParseFile(fs, name, text, parser.ParseComments)
		if err != nil {
			log.Fatalf("parsing package: %s: %s", name, err)
		}
		astFiles = append(astFiles, parsedFile)
		files = append(files, &File{
			file:        parsedFile,
			pkg:         g.pkg,
			trimPrefix:  g.trimPrefix,
			lineComment: g.lineComment,
		})
	}
	if len(astFiles) == 0 {
		log.Fatalf("%s: no buildable Go files", directory)
	}

	// this will load all types
	pkgs, err := parser.ParseDir(fs, directory, func(fi os.FileInfo) bool {
		if strings.HasSuffix(fi.Name(), "_gen.go") {
			return false
		}

		if fi.Name() == path.Base(names[0]) {
			return false
		}

		return true
	}, parser.ParseComments)
	if err != nil {
		log.Fatalf("failed to parse folder", err.Error())
	}

	for _, pkg := range pkgs {
		for _, parsedFile := range pkg.Files {
			astFiles = append(astFiles, parsedFile)
			files = append(files, &File{
				file:        parsedFile,
				pkg:         g.pkg,
				trimPrefix:  g.trimPrefix,
				lineComment: g.lineComment,
			})
		}
	}

	g.pkg.name = astFiles[0].Name.Name
	g.pkg.files = files
	g.pkg.dir = directory
	g.pkg.typeCheck(fs, astFiles)
}

// check type-checks the package so we can evaluate contants whose values we are printing.
func (pkg *Package) typeCheck(fs *token.FileSet, astFiles []*ast.File) {
	pkg.defs = make(map[*ast.Ident]types.Object)
	config := types.Config{
		IgnoreFuncBodies: true, // We only need to evaluate constants.
		Importer:         defaultImporter(),
		FakeImportC:      true,
	}
	info := &types.Info{
		Defs: pkg.defs,
	}
	// checker := types.NewChecker(config, fs, nil, info)
	typesPkg, err := config.Check(pkg.dir, fs, astFiles, info)
	if err != nil {
		log.Fatalf("checking package: %s", err)
	}
	pkg.typesPkg = typesPkg
}

// generate produces the String method for the named type.
func (g *Generator) generate() {
	types := map[string][]string{}

	for _, file := range []*File{g.pkg.files[0]} {
		// Set the state for this run of the walker.
		for _, decl := range file.file.Decls {
			if gd, ok := decl.(*ast.GenDecl); ok {
				for _, spec := range gd.Specs {
					if ts, ok := spec.(*ast.TypeSpec); ok {
						columns := []string{}
						if st, ok := ts.Type.(*ast.StructType); ok {
							for _, field := range st.Fields.List {
								if field.Tag == nil {
									continue
								}

								tag := field.Tag.Value
								tag = strings.TrimPrefix(tag, "`")
								tag = strings.TrimSuffix(tag, "`")

								value, ok := reflect.StructTag(tag).Lookup("db")
								if !ok {
									continue
								}

								columns = append(columns, value)
							}
						}

						types[ts.Name.Name] = columns
					}
				}
			}

		}
	}

	nameize := func(name string) string {
		value := ""

		parts := strings.Split(name, "_")
		for _, part := range parts {
			if part == "id" {
				value += "ID"
				continue
			}

			value += strings.Title(part)
		}

		return value
	}

	g.Printf("const (\n")
	for name, columns := range types {
		for _, column := range columns {
			g.Printf("%s%s = \"%s\"\n", name, nameize(column), column)
		}
	}
	g.Printf(")\n")

	for name, columns := range types {
		g.Printf("var (\n")

		g.Printf("query%sDelete db.Query = \"UPDATE %s SET active = 0 ", name, *tableName)
		g.Printf(" WHERE `%s`=:%s\"", *tableKey, *tableKey)
		g.Printf("\n")

		g.Printf("query%sSelect db.Query = \"SELECT ", name)
		for i, column := range columns {
			if i > 0 {
				g.Printf(", ")
			}

			g.Printf("`%s`", column)
		}

		g.Printf(" FROM %s\"", *tableName)
		g.Printf("\n")

		g.Printf("query%sUpdate db.Query = \"UPDATE %s SET ", name, *tableName)
		for i, column := range columns {
			if i > 0 {
				g.Printf(", ")
			}

			g.Printf("`%s`=:%s", column, column)
		}

		g.Printf(" WHERE %s=:%s	\"", *tableKey, *tableKey)
		g.Printf("\n")

		g.Printf("query%sInsert db.Query = \"INSERT INTO %s (", name, *tableName)
		for i, column := range columns {
			if i > 0 {
				g.Printf(", ")
			}

			g.Printf("`%s`", column)
		}

		g.Printf(") VALUES (")
		for i, column := range columns {
			if i > 0 {
				g.Printf(", ")
			}

			g.Printf(":%s", column)
		}

		g.Printf(")\"")
		g.Printf("\n")

		g.Printf("query%sInsertOrUpdate db.Query = \"INSERT INTO %s (", name, *tableName)
		for i, column := range columns {
			if i > 0 {
				g.Printf(", ")
			}

			g.Printf("`%s`", column)
		}

		g.Printf(") VALUES (")
		for i, column := range columns {
			if i > 0 {
				g.Printf(", ")
			}

			g.Printf(":%s", column)
		}

		g.Printf(") ON DUPLICATE KEY UPDATE ")

		for i, column := range columns {
			if column == "created_at" {
				continue
			}

			if i > 0 {
				g.Printf(", ")
			}

			g.Printf("`%s`=:%s", column, column)
		}

		g.Printf("\"")

		g.Printf("\n")

		g.Printf(")\n")

		g.Printf("func (s *%s) Get(tx *sqlx.Tx, qx db.Queryx) error {\n", name)
		g.Printf(`
	stmt, err := tx.Preparex(string(qx.Query))
	if err != nil {
		return err
	}

	if err := stmt.Get(s, qx.Params...); err != nil {
		return err
	}

return nil
}`)
		g.Printf("\n")
		g.Printf("\n")

		g.Printf("func (s *%s) Update(tx *sqlx.Tx) error {\n", name)

		for _, column := range columns {
			// actually check field name (UpdatedAt), instead of
			// column name
			if column == "updated_at" {
				g.Printf("s.UpdatedAt = time.Now()\n")
			}
		}

		g.Printf(` _, err := tx.NamedExec(string(query%sUpdate), s)
	return err
}
`, name)

		// should we combine update and insert or update?
		g.Printf("func (s *%s) InsertOrUpdate(tx *sqlx.Tx) error {\n", name)

		for _, column := range columns {
			// actually check field name (CreatedAt), instead of
			// column name
			if column == "created_at" {
			} else if column == "updated_at" {
				g.Printf("s.UpdatedAt = time.Now()\n")
			}
		}

		g.Printf(`
	_, err := tx.NamedExec(string(query%sInsertOrUpdate), s)
	return err
}
`, name)

		g.Printf("func (s *%s) Insert(tx *sqlx.Tx) error {\n", name)

		for _, column := range columns {
			// actually check field name (CreatedAt), instead of
			// column name
			if column == "created_at" {
				g.Printf("s.CreatedAt = time.Now()\n")
			} else if column == "updated_at" {
				g.Printf("s.UpdatedAt = time.Now()\n")
			}
		}

		g.Printf(`
	_, err := tx.NamedExec(string(query%sInsert), s)
	return err
}
`, name)

		g.Printf(`func (s *%s) Delete(tx *sqlx.Tx) error {`, name)
		g.Printf(`_, err := tx.NamedExec(string(query%sDelete), s)
	return err
}
`, name)

		// single (alert) plural (alerts)
		g.Printf(`func Query%ss() db.Queryx {`, name)
		g.Printf(`return db.Queryx{
		Query:  query%sSelect,
		Params: []interface{}{},
	}
}
`, name)

	}
}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

// Run goimports to format and update imports statements in generated code.
func goimports(filename string, inputBytes []byte) (outputBytes []byte, err error) {
	if false {
		return inputBytes, nil
	}
	cmd := exec.Command("goimports")
	// cmd := exec.Command(os.Getenv("GOPATH") + "/bin/goimports")
	input, _ := cmd.StdinPipe()
	output, _ := cmd.StdoutPipe()
	cmderr, _ := cmd.StderrPipe()
	err = cmd.Start()
	if err != nil {
		return
	}
	input.Write(inputBytes)
	input.Close()

	outputBytes, _ = ioutil.ReadAll(output)
	errors, _ := ioutil.ReadAll(cmderr)
	if len(errors) > 0 {
		errors := strings.Replace(string(errors), "<standard input>", filename, -1)
		log.Printf("Syntax errors in generated code:\n%s", errors)
		return inputBytes, nil
	}

	return
}
